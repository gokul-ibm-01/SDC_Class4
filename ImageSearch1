!pip install google-generativeai gradio requests --quiet

import google.generativeai as genai
import gradio as gr
import requests

# ðŸ”¹ Set your API Keys (Replace with your actual keys)
GEMINI_API_KEY = "AIzaSyDnMG3av2_FdnX8oD6l7Zfd_SMAK2PwGVw"
GOOGLE_CSE_API_KEY = "AIzaSyBnDeCvfQum-j017AdFip_VNyZHt6AQ-gM"
GOOGLE_CSE_ID = "30a5a426119f14634"

# ðŸ”¹ Configure Gemini
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel("gemini-pro")

# ðŸ”¹ Function to refine search query using Gemini
def refine_search_query(user_input):
    response = gemini_model.generate_content(f"Convert this into a precise image search query: {user_input}")
    return response.text.strip()

# ðŸ”¹ Function to search images using Google Custom Search API
def search_images(query):
    url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "q": query,
        "cx": GOOGLE_CSE_ID,
        "key": GOOGLE_CSE_API_KEY,
        "searchType": "image",
        "num": 5
    }
    response = requests.get(url, params=params).json()

    # Extract image URLs
    image_urls = [item["link"] for item in response.get("items", [])]
    return image_urls

# ðŸ”¹ Final function for Gradio
def image_search(prompt):
    refined_query = refine_search_query(prompt)
    return search_images(refined_query)

# ðŸ”¹ Gradio interface
iface = gr.Interface(
    fn=image_search,
    inputs="text",
    outputs=gr.Gallery(label="Search Results"),
    title="AI-Powered Image Search with Gemini",
    description="Enter a query, and AI will find the best images for you!"
)

# ðŸ”¹ Launch Gradio app
iface.launch(share=True)
